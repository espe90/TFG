{
  "@context": {
	"dmmlcc": "http://dicits.ugr.es/dmmlcc#",
	"dcterms": "http://purl.org/dc/terms/#",
    "foaf": "http://xmlns.com/foaf/0.1/#",
    "gr": "http://purl.org/goodrelations/v1#",
    "mls": "http://www.w3.org/ns/mls#",
    "owl": "http://www.w3.org/2002/07/owl#",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "skos": "http://www.w3.org/2004/02/skos/core#",
    "waa": "http://purl.oclc.org/NET/WebAuthentication",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@graph":  [ 	 
	 {
		"@id": "dmmlcc:RandomForestSpark_Service",
		"@type": "dmmlcc:MLService",
	 	"dcterms:description": "ml_random_forest fits a Random Forest Regression model or Classification model on a SparkDataFrame.",
		"dcterms:creator":"Esperanza Jim√©nez",
		"dcterms:created":"2018-03-09",
		"dcterms:modified":"2018-03-20",
		"dcterms:publisher":"DICITS_ML",
		"dcterms:title":"RandomForestSpark",
		"rdfs:comments":"Users can call summary to get a summary of the fitted Random Forest model, predict to make predictions on new data and save/load fitted models.",
		"dmmlcc:hasAuthentication": {
			"@id": "dmmlcc:RandomForestSpark_Service_Auth",
			"@type": "dmmlcc:MLServiceAuthentication",
		 	"dcterms:description": "The service requires authentication, and the type of authentication",
			"waa:requiresAuthentication":"None"
		},
		"dmmlcc:hasOperation": {
			"@id": "dmmlcc:RandomForestSpark_Service_Operation",
			"@type": "dmmlcc:MLOperation",
			"dcterms:description": "Operation performing the service",
			"mls:hasInput":
				{
				"@id": "dmmlcc:RandomForestSpark_Service_Input",
				"@type": "dmmlcc:MLServiceInput",
				"dcterms:title":"InputDataSet",
				"dcterms:description": "Input data contains Dataset or Feature/s",
				"dmmlcc:contains":{
					"@id":"dmmlcc:contains_dataset_01",
					"@type:":"dmmlcc:contains",
					"mls:Data":[{
							"@id":"dmmlcc:dataset_01",
							"@type:":"mls:DataSet",
							"dcterms:description": "Dataset on which the service is applied",
							"dcterms:title": "DataSet",
							"dmmlcc:format":
								{
									"@id":"dmmlcc:ParameterFormat_CVS_01",
									"@type": "dmmlcc:csv",
									"dcterms:description": "CSV Source file format"									
								},
							"dmmlcc:storagebucket":"dicits://",
							"dmmlcc:mandatory":"true"
							}
						]
					}
			},
			"dmmlcc:hasInputParameters":
			{
				"@id": "dmmlcc:RandomForestSpark_Service_InputParameters",
				"@type": "dmmlcc:MLServiceInputParameters",
				"dcterms:description": "Input Parameters",
				"dcterms:title": "Input",
				"dmmlcc:Parameters":[
					{
						"@id":"dmmlcc:response_parameter_01",
						"@type": "dmmlcc:MLServiceInputParameter",
						"dcterms:title": "formula",
						"dcterms:description": "As a character string or a formula",
						"dmmlcc:mandatory":"true",	
						"dmmlcc:defaultvalue":" "					
					},
					{
						"@id":"dmmlcc:response_parameter_02",
						"@type": "dmmlcc:MLServiceInputParameter",
						"dcterms:title": "x",
						"dcterms:description": "A spark connection, ml pipeline or a tbl spark",
						"dmmlcc:mandatory":"true",
						"dmmlcc:defaultvalue":""												
					},
					{
						"@id":"dmmlcc:response_parameter_03",
						"@type": "dmmlcc:MLServiceInputParameter",
						"dcterms:title": "max_depth",
						"dcterms:description": "Maximum depth of the tree",
						"dmmlcc:mandatory":"optional",
						"dmmlcc:defaultvalue":""
												
					},
					{
						"@id":"dmmlcc:response_parameter_04",
						"@type": "dmmlcc:MLServiceInputParameter",
						"dcterms:title": "num_trees",
						"dcterms:description": "Number of trees to train",
						"dmmlcc:mandatory":"optional",
						"dmmlcc:defaultvalue":""												
					}					
				]			
			},			
			"mls:hasOutput":{
				"@id": "dmmlcc:RandomForestSpark_Service_Output",
				"@type": "dmmlcc:MLServiceOutput",
				"dcterms:description": "Output of the service contains Model or ModelEvaluation or Data",
				"mls:Model":{
					"@id":"dmmlcc:RandomForestSpark_Model",
					"@type": "dmmlcc:PMML_Model",
					"dcterms:title": "PMML Model related",
					"dcterms:description": "PMML model to represent mining models",
					"dmmlcc:storagebucket":"dicits://models/"
				},
				"mls:ModelEvaluation":{
					"@id":"dmmlcc:RandomForestSpark_ModelEvaluation",
					"@type": "dmmlcc:ModelEvaluation",
					"dcterms:title": "Model evaluation",
					"dcterms:description": "Model Evaluation",
					"dmmlcc:storagebucket":"dicits://modelevaluation/"
				}
			},
			"mls:executes":{
				"@id": "mls:RandomForestSpark_Implementation",
				"@type": "mls:Implementation",
				"dcterms:description": "Implementation of RandomForest Model",
				"dmmlcc:implements":[
					{
						"@id":"dmmlcc:MLAlgorithm_01",
						"@type":"mls:Algorithm",
						"dcterms:description": "RandomForest Algorithm in SparkR",
						"dmmlcc:ImplementationSource":"R",
						"dmmlcc:package":"sparklyr",
						"dmmlcc:functions":["ml_random_forest"]
					}
				]
			}
		}
		
	 }
  ]
 }
