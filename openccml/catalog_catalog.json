{
    "basePath": "/openccml",
    "consumes": [
        "application/json"
    ],
    "info": null,
    "paths": {
        "/acf": {
            "get": {
                "parameters": [
                    {
                        "default": "TRUE",
                        "description": "Logical. If TRUE (the default) the resulting acf is plotted.",
                        "in": "query",
                        "name": "plot",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "correlation",
                        "description": "Character string giving the type of acf to be computed. Allowed values are 'correlation' (the default), 'covariance' or 'partial'.",
                        "in": "query",
                        "name": "var_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.contiguous",
                        "description": "Function to handle missing values. Default is na.contiguous. Useful alternatives are na.pass and na.interp.",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "10\\u2217log10(N/m)",
                        "description": "Maximum lag at which to calculate the acf. Default is 10\\u2217\\ log10(N/m) where N is the number of observations and m the number of series.\\ \\ Will be automatically limited to one less than the number of observations\\ \\ in the series.",
                        "in": "query",
                        "name": "lag__max",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A univariate or multivariate (not Ccf) numeric time series object or a numeric vector or matrix.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "Should covariances be about the sample means?",
                        "in": "query",
                        "name": "demean",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an Acf, Autocorrelation Function Estimation",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "TRUE",
                        "description": "Logical. If TRUE (the default) the resulting acf is plotted.",
                        "in": "query",
                        "name": "plot",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "correlation",
                        "description": "Character string giving the type of acf to be computed. Allowed values are 'correlation' (the default), 'covariance' or 'partial'.",
                        "in": "query",
                        "name": "var_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.contiguous",
                        "description": "Function to handle missing values. Default is na.contiguous. Useful alternatives are na.pass and na.interp.",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "10\\u2217log10(N/m)",
                        "description": "Maximum lag at which to calculate the acf. Default is 10\\u2217\\ log10(N/m) where N is the number of observations and m the number of series.\\ \\ Will be automatically limited to one less than the number of observations\\ \\ in the series.",
                        "in": "query",
                        "name": "lag__max",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A univariate or multivariate (not Ccf) numeric time series object or a numeric vector or matrix.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "Should covariances be about the sample means?",
                        "in": "query",
                        "name": "demean",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an Acf, Autocorrelation Function Estimation",
                "type": "string"
            }
        },
        "/acf/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/adftest": {
            "get": {
                "parameters": [
                    {
                        "default": "stationary",
                        "description": "Indicates the alternative hypothesis and must be one of 'stationary' (default) or 'explosive'. You can specify just the initial letter.",
                        "in": "query",
                        "name": "alternative",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "trunc((length(x)-1)^(1/3)))",
                        "description": "The lag order to calculate the test statistic.",
                        "in": "query",
                        "name": "k",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A numeric vector or time series.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an Adf.test, Augmented Dickey-Fuller Test",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "stationary",
                        "description": "Indicates the alternative hypothesis and must be one of 'stationary' (default) or 'explosive'. You can specify just the initial letter.",
                        "in": "query",
                        "name": "alternative",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "trunc((length(x)-1)^(1/3)))",
                        "description": "The lag order to calculate the test statistic.",
                        "in": "query",
                        "name": "k",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A numeric vector or time series.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an Adf.test, Augmented Dickey-Fuller Test",
                "type": "string"
            }
        },
        "/adftest/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/arima": {
            "get": {
                "parameters": [
                    {
                        "default": "TRUE",
                        "description": "It's a mean/intercept term. The default is TRUE for undifferenced series, and it is ignored for ARIMA models with differencing.",
                        "in": "query",
                        "name": "include__mean",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "c(0L,0L,0L)",
                        "description": "A specification of the non-seasonal part of the ARIMA model: the three integer components (p, d, q) are the AR order, the degree of differencing, and the MA order.",
                        "in": "query",
                        "name": "order",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A univariate time series",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optional numeric vector of the same length as the total number of parameters. If supplied, only NA entries in fixed will be varied. transform.pars = TRUE will be overridden (with a warning) if any AR parameters are fixed. It may be wise to set transform.pars = FALSE when fixing MA parameters, especially near non-invertibility.",
                        "in": "query",
                        "name": "fixed",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "1e6",
                        "description": "The prior variance (as a multiple of the innovations variance) for the past observations in a differenced model. Do not reduce this.",
                        "in": "query",
                        "name": "kappa",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "list()",
                        "description": "List of control parameters for optim.",
                        "in": "query",
                        "name": "optim__control",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optional numeric vector of initial parameter values. Missing values will be filled in, by zeroes except for regression coefficients. Values already specified in fixed will be ignored.",
                        "in": "query",
                        "name": "init",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optional vector or matrix of external regressors, which must have the same number of rows as x.",
                        "in": "query",
                        "name": "xreg",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "BFGS",
                        "description": "The value passed as the method argument to optim.",
                        "in": "query",
                        "name": "optim__method",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "list(order = c(0L, 0L, 0L), period = NA)",
                        "description": "A specification of the seasonal part of the ARIMA model, plus the period (which defaults to frequency(x)). This should be a list with components order and period, but a specification of just a numeric vector of length 3 will be turned into a suitable list with the specification as the order.",
                        "in": "query",
                        "name": "seasonal",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "logical; if true, the AR parameters are transformed to ensure that they remain in the region of stationarity. Not used for method = 'CSS'. For method = 'ML', it has been advantageous to set transform.pars = FALSE in some cases, see also fixed.",
                        "in": "query",
                        "name": "transform__pars",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "CSS",
                        "description": "Fitting method: maximum likelihood or minimize conditional sum-of-squares. The default (unless there are missing values) is to use conditional-sum-of-squares to find starting values, then maximum likelihood.",
                        "in": "query",
                        "name": "method",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "CSS",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an ARIMA model to a univariate time series",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "TRUE",
                        "description": "It's a mean/intercept term. The default is TRUE for undifferenced series, and it is ignored for ARIMA models with differencing.",
                        "in": "query",
                        "name": "include__mean",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "c(0L,0L,0L)",
                        "description": "A specification of the non-seasonal part of the ARIMA model: the three integer components (p, d, q) are the AR order, the degree of differencing, and the MA order.",
                        "in": "query",
                        "name": "order",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A univariate time series",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optional numeric vector of the same length as the total number of parameters. If supplied, only NA entries in fixed will be varied. transform.pars = TRUE will be overridden (with a warning) if any AR parameters are fixed. It may be wise to set transform.pars = FALSE when fixing MA parameters, especially near non-invertibility.",
                        "in": "query",
                        "name": "fixed",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "1e6",
                        "description": "The prior variance (as a multiple of the innovations variance) for the past observations in a differenced model. Do not reduce this.",
                        "in": "query",
                        "name": "kappa",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "list()",
                        "description": "List of control parameters for optim.",
                        "in": "query",
                        "name": "optim__control",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optional numeric vector of initial parameter values. Missing values will be filled in, by zeroes except for regression coefficients. Values already specified in fixed will be ignored.",
                        "in": "query",
                        "name": "init",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optional vector or matrix of external regressors, which must have the same number of rows as x.",
                        "in": "query",
                        "name": "xreg",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "BFGS",
                        "description": "The value passed as the method argument to optim.",
                        "in": "query",
                        "name": "optim__method",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "list(order = c(0L, 0L, 0L), period = NA)",
                        "description": "A specification of the seasonal part of the ARIMA model, plus the period (which defaults to frequency(x)). This should be a list with components order and period, but a specification of just a numeric vector of length 3 will be turned into a suitable list with the specification as the order.",
                        "in": "query",
                        "name": "seasonal",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "logical; if true, the AR parameters are transformed to ensure that they remain in the region of stationarity. Not used for method = 'CSS'. For method = 'ML', it has been advantageous to set transform.pars = FALSE in some cases, see also fixed.",
                        "in": "query",
                        "name": "transform__pars",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "CSS",
                        "description": "Fitting method: maximum likelihood or minimize conditional sum-of-squares. The default (unless there are missing values) is to use conditional-sum-of-squares to find starting values, then maximum likelihood.",
                        "in": "query",
                        "name": "method",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "CSS",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an ARIMA model to a univariate time series",
                "type": "string"
            }
        },
        "/arima/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/autoarima": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Maximum value of p",
                        "in": "query",
                        "name": "max__p",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum value of q",
                        "in": "query",
                        "name": "max__q",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum number of seasonal differences",
                        "in": "query",
                        "name": "max__D",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Starting value of q in stepwise procedure.",
                        "in": "query",
                        "name": "start__q",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Starting value of P in stepwise procedure.",
                        "in": "query",
                        "name": "start__P",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Maximum value of Q",
                        "in": "query",
                        "name": "max__Q",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A univariate time series",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum number of non-seasonal differences",
                        "in": "query",
                        "name": "max__d",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Allows the user to specify the amount of parallel processes to be used if parallel = TRUE and stepwise = FALSE. If NULL, then the number of logical cores is automatically detected and all available cores are used.",
                        "in": "query",
                        "name": "num__cores",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "If FALSE, restricts search to non-seasonal models.",
                        "in": "query",
                        "name": "seasonal",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "An integer value indicating how many observations to use in model selection. The last truncate values of the series are used to select a model when truncate is not NULL and approximation=TRUE. All observations are used if either truncate=NULL or approximation=FALSE.",
                        "in": "query",
                        "name": "truncate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "If TRUE, models with a non-zero mean are considered.",
                        "in": "query",
                        "name": "allowmean",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Starting value of Q in stepwise procedure.",
                        "in": "query",
                        "name": "start__Q",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Information criterion to be used in model selection, 'aicc', 'aic', 'bic'",
                        "in": "query",
                        "name": "ic",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Type of unit root test to use, 'kpss', 'adf' or 'pp'.",
                        "in": "query",
                        "name": "test",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "This determines which seasonal unit root test is used, 'ocsb'\\ \\ or 'ch' .",
                        "in": "query",
                        "name": "seasonal__test",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Use adjusted back-transformed mean for Box-Cox transformations. If TRUE, point forecasts and fitted values are mean forecast. Otherwise, these points can be considered the median of the forecast densities.",
                        "in": "query",
                        "name": "biasadj",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Starting value of p in stepwise procedure.",
                        "in": "query",
                        "name": "start__p",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "If TRUE, models with drift terms are considered.",
                        "in": "query",
                        "name": "allowdrift",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "If TRUE and stepwise = FALSE, then the specification search is done in parallel. This can give a significant speedup on mutlicore machines.",
                        "in": "query",
                        "name": "parallel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "If TRUE, restricts search to stationary models.",
                        "in": "query",
                        "name": "stationary",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NA",
                        "description": "Order of first-differencing. If missing, will choose a value based on KPSS test.",
                        "in": "query",
                        "name": "d",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NA",
                        "description": "Order of seasonal-differencing. If missing, will choose a value based on OCSB test.",
                        "in": "query",
                        "name": "D",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum value of p+q+P+Q if model selection is not stepwise.",
                        "in": "query",
                        "name": "max__order",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optionally, a vector or matrix of external regressors, which must have the same number of rows as y.",
                        "in": "query",
                        "name": "xreg",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum value of P",
                        "in": "query",
                        "name": "max__P",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "If TRUE, estimation is via conditional sums of squares andthe information criteria used for model selection are approximated. The final model is still computed using maximum likelihood estimation. Approximation should be used for long time series or a high seasonal period to avoid excessive computation times.",
                        "in": "query",
                        "name": "approximation",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Box-Cox transformation parameter. Ignored if NULL. Otherwise, data transformed before model is estimated.",
                        "in": "query",
                        "name": "var_lambda",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "if TRUE, will do stepwise selection (faster). Otherwise, it searches over all models. Non-stepwise selection can be very slow, especially for seasonal models.",
                        "in": "query",
                        "name": "stepwise",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "If TRUE, the list of ARIMA models considered will be reported.",
                        "in": "query",
                        "name": "trace",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit best ARIMA model to univariate time series",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Maximum value of p",
                        "in": "query",
                        "name": "max__p",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum value of q",
                        "in": "query",
                        "name": "max__q",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum number of seasonal differences",
                        "in": "query",
                        "name": "max__D",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Starting value of q in stepwise procedure.",
                        "in": "query",
                        "name": "start__q",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Starting value of P in stepwise procedure.",
                        "in": "query",
                        "name": "start__P",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Maximum value of Q",
                        "in": "query",
                        "name": "max__Q",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A univariate time series",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum number of non-seasonal differences",
                        "in": "query",
                        "name": "max__d",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Allows the user to specify the amount of parallel processes to be used if parallel = TRUE and stepwise = FALSE. If NULL, then the number of logical cores is automatically detected and all available cores are used.",
                        "in": "query",
                        "name": "num__cores",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "If FALSE, restricts search to non-seasonal models.",
                        "in": "query",
                        "name": "seasonal",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "An integer value indicating how many observations to use in model selection. The last truncate values of the series are used to select a model when truncate is not NULL and approximation=TRUE. All observations are used if either truncate=NULL or approximation=FALSE.",
                        "in": "query",
                        "name": "truncate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "If TRUE, models with a non-zero mean are considered.",
                        "in": "query",
                        "name": "allowmean",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Starting value of Q in stepwise procedure.",
                        "in": "query",
                        "name": "start__Q",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Information criterion to be used in model selection, 'aicc', 'aic', 'bic'",
                        "in": "query",
                        "name": "ic",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Type of unit root test to use, 'kpss', 'adf' or 'pp'.",
                        "in": "query",
                        "name": "test",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "This determines which seasonal unit root test is used, 'ocsb'\\ \\ or 'ch' .",
                        "in": "query",
                        "name": "seasonal__test",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Use adjusted back-transformed mean for Box-Cox transformations. If TRUE, point forecasts and fitted values are mean forecast. Otherwise, these points can be considered the median of the forecast densities.",
                        "in": "query",
                        "name": "biasadj",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Starting value of p in stepwise procedure.",
                        "in": "query",
                        "name": "start__p",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "If TRUE, models with drift terms are considered.",
                        "in": "query",
                        "name": "allowdrift",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "If TRUE and stepwise = FALSE, then the specification search is done in parallel. This can give a significant speedup on mutlicore machines.",
                        "in": "query",
                        "name": "parallel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "If TRUE, restricts search to stationary models.",
                        "in": "query",
                        "name": "stationary",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NA",
                        "description": "Order of first-differencing. If missing, will choose a value based on KPSS test.",
                        "in": "query",
                        "name": "d",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NA",
                        "description": "Order of seasonal-differencing. If missing, will choose a value based on OCSB test.",
                        "in": "query",
                        "name": "D",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum value of p+q+P+Q if model selection is not stepwise.",
                        "in": "query",
                        "name": "max__order",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optionally, a vector or matrix of external regressors, which must have the same number of rows as y.",
                        "in": "query",
                        "name": "xreg",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum value of P",
                        "in": "query",
                        "name": "max__P",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "If TRUE, estimation is via conditional sums of squares andthe information criteria used for model selection are approximated. The final model is still computed using maximum likelihood estimation. Approximation should be used for long time series or a high seasonal period to avoid excessive computation times.",
                        "in": "query",
                        "name": "approximation",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Box-Cox transformation parameter. Ignored if NULL. Otherwise, data transformed before model is estimated.",
                        "in": "query",
                        "name": "var_lambda",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "if TRUE, will do stepwise selection (faster). Otherwise, it searches over all models. Non-stepwise selection can be very slow, especially for seasonal models.",
                        "in": "query",
                        "name": "stepwise",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "If TRUE, the list of ARIMA models considered will be reported.",
                        "in": "query",
                        "name": "trace",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit best ARIMA model to univariate time series",
                "type": "string"
            }
        },
        "/autoarima/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/box": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "The statistic will be based on lag autocorrelation coefficients.",
                        "in": "query",
                        "name": "lag",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A numeric vector or time series.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Number of degrees of freedom to be subtracted if x is a series of residuals.",
                        "in": "query",
                        "name": "fitdf",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "Ljung",
                        "description": "Test to be performed: partial matching is used. Box (default) or Ljung.",
                        "in": "query",
                        "name": "var_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "Ljung",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit a Box-Pierce and Ljung-Box Tests.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "The statistic will be based on lag autocorrelation coefficients.",
                        "in": "query",
                        "name": "lag",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A numeric vector or time series.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Number of degrees of freedom to be subtracted if x is a series of residuals.",
                        "in": "query",
                        "name": "fitdf",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "Ljung",
                        "description": "Test to be performed: partial matching is used. Box (default) or Ljung.",
                        "in": "query",
                        "name": "var_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "Ljung",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit a Box-Pierce and Ljung-Box Tests.",
                "type": "string"
            }
        },
        "/box/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/catalog": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "response": {
                    "200": {
                        "description": "JSON containing the catalog."
                    }
                },
                "summary": "Returns the complete catalog",
                "type": "string"
            }
        },
        "/ccf": {
            "get": {
                "parameters": [
                    {
                        "default": "10\\u2217log10(N/m)",
                        "description": "Maximum lag at which to calculate the Ccf. Default is 10\\u2217\\ log10(N/m) where N is the number of observations and m the number of series.\\ \\ Will be automatically limited to one less than the number of observations\\ \\ in the series.",
                        "in": "query",
                        "name": "lag__max",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "correlation",
                        "description": "Character string giving the type of Ccf to be computed. Allowed values are 'correlation' (the default) or 'covariance'.",
                        "in": "query",
                        "name": "var_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "Should covariances be about the sample means?",
                        "in": "query",
                        "name": "demean",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A univariate numeric time series object or a numeric vector.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "Logical. If TRUE (the default) the resulting Ccf is plotted.",
                        "in": "query",
                        "name": "plot",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.contiguous",
                        "description": "Function to handle missing values. Default is na.contiguous. Useful alternatives are na.pass and na.interp.",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "10\\u2217log10(N/m)",
                        "description": "A univariate numeric time series object or a numeric vector.",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "10\\u2217log10(N/m)",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an Ccf, Cross-Correlation Function Estimation",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "10\\u2217log10(N/m)",
                        "description": "Maximum lag at which to calculate the Ccf. Default is 10\\u2217\\ log10(N/m) where N is the number of observations and m the number of series.\\ \\ Will be automatically limited to one less than the number of observations\\ \\ in the series.",
                        "in": "query",
                        "name": "lag__max",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "correlation",
                        "description": "Character string giving the type of Ccf to be computed. Allowed values are 'correlation' (the default) or 'covariance'.",
                        "in": "query",
                        "name": "var_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "Should covariances be about the sample means?",
                        "in": "query",
                        "name": "demean",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A univariate numeric time series object or a numeric vector.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "Logical. If TRUE (the default) the resulting Ccf is plotted.",
                        "in": "query",
                        "name": "plot",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.contiguous",
                        "description": "Function to handle missing values. Default is na.contiguous. Useful alternatives are na.pass and na.interp.",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "10\\u2217log10(N/m)",
                        "description": "A univariate numeric time series object or a numeric vector.",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "10\\u2217log10(N/m)",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an Ccf, Cross-Correlation Function Estimation",
                "type": "string"
            }
        },
        "/ccf/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/cor": {
            "get": {
                "parameters": [
                    {
                        "default": "pearson",
                        "description": "A character string indicating which correlation coefficient (or covariance) is to be computed. One of 'pearson' (default), 'kendall', or 'spearman', can be abbreviated.",
                        "in": "query",
                        "name": "method",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "a numeric vector, matrix or data frame.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "everything",
                        "description": "An optional character string giving a method for computing covariances in the presence of missing values. This must be (an abbreviation of) one of the strings 'everything', 'all.obs', 'complete.obs', 'na.or.complete', or 'pairwise.complete.obs'.",
                        "in": "query",
                        "name": "use",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "null",
                        "description": "NULL (default) or a vector, matrix or data frame with compatible dimensions to x. The default is equivalent to y = x (but more efficient).",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "null",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Correlation",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "pearson",
                        "description": "A character string indicating which correlation coefficient (or covariance) is to be computed. One of 'pearson' (default), 'kendall', or 'spearman', can be abbreviated.",
                        "in": "query",
                        "name": "method",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "a numeric vector, matrix or data frame.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "everything",
                        "description": "An optional character string giving a method for computing covariances in the presence of missing values. This must be (an abbreviation of) one of the strings 'everything', 'all.obs', 'complete.obs', 'na.or.complete', or 'pairwise.complete.obs'.",
                        "in": "query",
                        "name": "use",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "null",
                        "description": "NULL (default) or a vector, matrix or data frame with compatible dimensions to x. The default is equivalent to y = x (but more efficient).",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "null",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Correlation",
                "type": "string"
            }
        },
        "/cor/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/dtw": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Query vector or local cost matrix",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Reference vector, unused if x given as cost matrix",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Run the Dynamic Time Warping Algorithm on Two Trajectories ",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Query vector or local cost matrix",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Reference vector, unused if x given as cost matrix",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Run the Dynamic Time Warping Algorithm on Two Trajectories ",
                "type": "string"
            }
        },
        "/dtw/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/ets": {
            "get": {
                "parameters": [
                    {
                        "default": "both",
                        "description": "Type of parameter space to impose, 'usual' indicates all parameters must lie between specified lower and upper bounds, 'admissible' indicates parameters must lie in the admissible space, 'both' (default) takes the intersection of these regions.",
                        "in": "query",
                        "name": "bounds",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Number of steps for average multistep MSE (1<=nmse).",
                        "in": "query",
                        "name": "nmse",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Box-Cox transformation parameter. Ignored if NULL. Otherwise, data transformed before model is estimated.",
                        "in": "query",
                        "name": "var_lambda",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "If TRUE and model is of class 'ets', then the initial values in the model are also not re-estimated.",
                        "in": "query",
                        "name": "use__initial__values",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Upper bounds for the parameters (alpha, beta, gamma, phi)",
                        "in": "query",
                        "name": "upper",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "If TRUE, models with multiplicative trend are allowed when searching for a model. Otherwise, the model space excludes them. This argument is ignored if a multiplicative trend model is explicitly requested",
                        "in": "query",
                        "name": "allow__multiplicative__trend",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Value of alpha. If NULL, it is estimated",
                        "in": "query",
                        "name": "alpha",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Value of gamma. If NULL, it is estimated",
                        "in": "query",
                        "name": "gamma",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "a numeric vector or time series",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Lower bounds for the parameters (alpha, beta, gamma, phi)",
                        "in": "query",
                        "name": "lower",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Value of beta. If NULL, it is estimated",
                        "in": "query",
                        "name": "beta",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Information criterion to be used in model selection, 'aicc', 'aic', 'bic'",
                        "in": "query",
                        "name": "ic",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "If TRUE (default), the models with infinite variance will not be allowed.",
                        "in": "query",
                        "name": "restrict",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Value of phi. If NULL, it is estimated",
                        "in": "query",
                        "name": "phi",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "lik",
                        "description": "Optimization criterion. One of 'mse' (Mean Square Error), 'amse' (Average MSE over first nmse forecast horizons), 'sigma' (Standard deviation of residuals), 'mae' (Mean of absolute residuals), or 'lik' (Log-likelihood, the default).",
                        "in": "query",
                        "name": "opt__crit",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "If TRUE, will only consider additive models. Default is FALSE.",
                        "in": "query",
                        "name": "additive__only",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "If TRUE, use a damped trend (either additive or multiplicative). If NULL, both damped and non-damped trends will be tried and the best model (according to the information criterion ic) returned.",
                        "in": "query",
                        "name": "damped",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "ZZZ",
                        "description": "Usually a three-character string identifying method using the framework terminology of Hyndman et al. (2002) and Hyndman et al. (2008). The first letter denotes the error type ('A', 'M' or 'Z'); the second letter denotes the trend type ('N','A','M' or 'Z'); and the third letter denotes the season type ('N','A','M' or 'Z'). In all cases, 'N'=none, 'A'=additive, 'M'=multiplicative and 'Z'=automatically selected.",
                        "in": "query",
                        "name": "model",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Use adjusted back-transformed mean for Box-Cox transformations. If TRUE, point forecasts and fitted values are mean forecast. Otherwise, these points can be considered the median of the forecast densities.",
                        "in": "query",
                        "name": "biasadj",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an Exponential smoothing state space model",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "both",
                        "description": "Type of parameter space to impose, 'usual' indicates all parameters must lie between specified lower and upper bounds, 'admissible' indicates parameters must lie in the admissible space, 'both' (default) takes the intersection of these regions.",
                        "in": "query",
                        "name": "bounds",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Number of steps for average multistep MSE (1<=nmse).",
                        "in": "query",
                        "name": "nmse",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Box-Cox transformation parameter. Ignored if NULL. Otherwise, data transformed before model is estimated.",
                        "in": "query",
                        "name": "var_lambda",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "If TRUE and model is of class 'ets', then the initial values in the model are also not re-estimated.",
                        "in": "query",
                        "name": "use__initial__values",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Upper bounds for the parameters (alpha, beta, gamma, phi)",
                        "in": "query",
                        "name": "upper",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "If TRUE, models with multiplicative trend are allowed when searching for a model. Otherwise, the model space excludes them. This argument is ignored if a multiplicative trend model is explicitly requested",
                        "in": "query",
                        "name": "allow__multiplicative__trend",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Value of alpha. If NULL, it is estimated",
                        "in": "query",
                        "name": "alpha",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Value of gamma. If NULL, it is estimated",
                        "in": "query",
                        "name": "gamma",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "a numeric vector or time series",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Lower bounds for the parameters (alpha, beta, gamma, phi)",
                        "in": "query",
                        "name": "lower",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Value of beta. If NULL, it is estimated",
                        "in": "query",
                        "name": "beta",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Information criterion to be used in model selection, 'aicc', 'aic', 'bic'",
                        "in": "query",
                        "name": "ic",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "If TRUE (default), the models with infinite variance will not be allowed.",
                        "in": "query",
                        "name": "restrict",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Value of phi. If NULL, it is estimated",
                        "in": "query",
                        "name": "phi",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "lik",
                        "description": "Optimization criterion. One of 'mse' (Mean Square Error), 'amse' (Average MSE over first nmse forecast horizons), 'sigma' (Standard deviation of residuals), 'mae' (Mean of absolute residuals), or 'lik' (Log-likelihood, the default).",
                        "in": "query",
                        "name": "opt__crit",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "If TRUE, will only consider additive models. Default is FALSE.",
                        "in": "query",
                        "name": "additive__only",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "If TRUE, use a damped trend (either additive or multiplicative). If NULL, both damped and non-damped trends will be tried and the best model (according to the information criterion ic) returned.",
                        "in": "query",
                        "name": "damped",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "ZZZ",
                        "description": "Usually a three-character string identifying method using the framework terminology of Hyndman et al. (2002) and Hyndman et al. (2008). The first letter denotes the error type ('A', 'M' or 'Z'); the second letter denotes the trend type ('N','A','M' or 'Z'); and the third letter denotes the season type ('N','A','M' or 'Z'). In all cases, 'N'=none, 'A'=additive, 'M'=multiplicative and 'Z'=automatically selected.",
                        "in": "query",
                        "name": "model",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Use adjusted back-transformed mean for Box-Cox transformations. If TRUE, point forecasts and fitted values are mean forecast. Otherwise, these points can be considered the median of the forecast densities.",
                        "in": "query",
                        "name": "biasadj",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an Exponential smoothing state space model",
                "type": "string"
            }
        },
        "/ets/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/jarque": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A numeric vector or time series.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit a Jarque Bera Test.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A numeric vector or time series.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit a Jarque Bera Test.",
                "type": "string"
            }
        },
        "/jarque/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/linear_regression": {
            "get": {
                "parameters": [
                    {
                        "default": "NULL",
                        "description": "Optional vector of weights to be used in the fitting process. If non-NULL, weighted least squares is used with weights weights (that is, minimizing sum(w*e^2)); otherwise ordinary least squares is used",
                        "in": "query",
                        "name": "weights",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.remove",
                        "description": "A function which indicates what should happen when the data contain NAs",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optional vector specifying a subset of observations to be used in the fitting process",
                        "in": "query",
                        "name": "subset",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Linear regression is an approach for modeling the relationship between a scalar dependent variable y and one or more explanatory variables (or independent variables) denoted X. The case of one explanatory variable is called simple linear regression.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "NULL",
                        "description": "Optional vector of weights to be used in the fitting process. If non-NULL, weighted least squares is used with weights weights (that is, minimizing sum(w*e^2)); otherwise ordinary least squares is used",
                        "in": "query",
                        "name": "weights",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.remove",
                        "description": "A function which indicates what should happen when the data contain NAs",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optional vector specifying a subset of observations to be used in the fitting process",
                        "in": "query",
                        "name": "subset",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Linear regression is an approach for modeling the relationship between a scalar dependent variable y and one or more explanatory variables (or independent variables) denoted X. The case of one explanatory variable is called simple linear regression.",
                "type": "string"
            }
        },
        "/linear_regression/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/lr_spark": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A spark_connection, ml_pipeline, or a tbl_spark.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "As a character string or a formula.",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "The maximum number of iterations to use.",
                        "in": "query",
                        "name": "max_iter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Perform regression using linear regression.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A spark_connection, ml_pipeline, or a tbl_spark.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "As a character string or a formula.",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "The maximum number of iterations to use.",
                        "in": "query",
                        "name": "max_iter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Perform regression using linear regression.",
                "type": "string"
            }
        },
        "/lr_spark/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/mlp": {
            "get": {
                "parameters": [
                    {
                        "default": " ",
                        "description": "sets the activation function of the output units to linear or logistic.",
                        "in": "query",
                        "name": "linOut",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "a matrix with training inputs for the network.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the corresponding targets values.",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "maximum of iterations to learn. ",
                        "in": "query",
                        "name": "maxit",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the parameters for the initialization function.",
                        "in": "query",
                        "name": "initFuncParams",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the parameters for the learning function.",
                        "in": "query",
                        "name": "learnFuncParams",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "number of units in the hidden layer(s). ",
                        "in": "query",
                        "name": "size",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Create and train a multi-layer perceptron (MLP).",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": " ",
                        "description": "sets the activation function of the output units to linear or logistic.",
                        "in": "query",
                        "name": "linOut",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "a matrix with training inputs for the network.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the corresponding targets values.",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "maximum of iterations to learn. ",
                        "in": "query",
                        "name": "maxit",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the parameters for the initialization function.",
                        "in": "query",
                        "name": "initFuncParams",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the parameters for the learning function.",
                        "in": "query",
                        "name": "learnFuncParams",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "number of units in the hidden layer(s). ",
                        "in": "query",
                        "name": "size",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Create and train a multi-layer perceptron (MLP).",
                "type": "string"
            }
        },
        "/mlp/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/mlp_spark": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A spark_connection, ml_pipeline, or a tbl_spark.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A numeric vector describing the layers -- each element in the vector gives the size of a layer. For example, c(4, 5, 2) would imply three layers, with an input (feature) layer of size 4, an intermediate layer of size 5, and an output (class) layer of size 2.",
                        "in": "query",
                        "name": "layers",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Used when x is a tbl_spark. R formula as a character string or a formula.",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Classification model based on the Multilayer Perceptron.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A spark_connection, ml_pipeline, or a tbl_spark.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A numeric vector describing the layers -- each element in the vector gives the size of a layer. For example, c(4, 5, 2) would imply three layers, with an input (feature) layer of size 4, an intermediate layer of size 5, and an output (class) layer of size 2.",
                        "in": "query",
                        "name": "layers",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Used when x is a tbl_spark. R formula as a character string or a formula.",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Classification model based on the Multilayer Perceptron.",
                "type": "string"
            }
        },
        "/mlp_spark/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/neuralnet": {
            "get": {
                "parameters": [
                    {
                        "default": " ",
                        "description": "a symbolic description of the model to be fitted.",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "logical. If the error function is equal to the negative log-likelihood function, the information criteria AIC and BIC will be calculated. Furthermore the usage of confidence.interval is meaningfull. ",
                        "in": "query",
                        "name": "likelihood",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "a data frame containing the variables specified in formula. ",
                        "in": "query",
                        "name": "data",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "logical. If act.fct should not be applied to the output neurons set linear output to TRUE, otherwise to FALSE.",
                        "in": "query",
                        "name": "linear__output",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "a differentiable function that is used for the calculation of the error. Alternatively, the strings 'sse' and 'ce' which stand for the sum of squared errors and the cross-entropy can be used.",
                        "in": "query",
                        "name": "err__fct",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Training of neural networks.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": " ",
                        "description": "a symbolic description of the model to be fitted.",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "logical. If the error function is equal to the negative log-likelihood function, the information criteria AIC and BIC will be calculated. Furthermore the usage of confidence.interval is meaningfull. ",
                        "in": "query",
                        "name": "likelihood",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "a data frame containing the variables specified in formula. ",
                        "in": "query",
                        "name": "data",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "logical. If act.fct should not be applied to the output neurons set linear output to TRUE, otherwise to FALSE.",
                        "in": "query",
                        "name": "linear__output",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "a differentiable function that is used for the calculation of the error. Alternatively, the strings 'sse' and 'ce' which stand for the sum of squared errors and the cross-entropy can be used.",
                        "in": "query",
                        "name": "err__fct",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Training of neural networks.",
                "type": "string"
            }
        },
        "/neuralnet/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/nnet": {
            "get": {
                "parameters": [
                    {
                        "default": "100",
                        "description": "Maximum number of iterations. Default 100.",
                        "in": "query",
                        "name": "maxit",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Data frame from which variables specified in formula are preferentially to be taken.",
                        "in": "query",
                        "name": "data",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Initial random weights on [-rang, rang]. Value about 0.5 unless the inputs are large, in which case it should be chosen so that rang * max(|x|) is about 1. ",
                        "in": "query",
                        "name": "rang",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Number of units in the hidden layer. Can be zero if there are skip-layer units. ",
                        "in": "query",
                        "name": "size",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "A formula of the form class ~ x1 + x2 + ... ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.omit",
                        "description": "A function to specify the action to be taken if NAs are found. The default action is for the procedure to fail. An alternative is na.omit, which leads to rejection of cases with missing values on any required variable.",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "An index vector specifying the cases to be used in the training sample.",
                        "in": "query",
                        "name": "subset",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "0",
                        "description": "Parameter for weight decay. Default 0.",
                        "in": "query",
                        "name": "decay",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "0",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit Neural Networks.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "100",
                        "description": "Maximum number of iterations. Default 100.",
                        "in": "query",
                        "name": "maxit",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Data frame from which variables specified in formula are preferentially to be taken.",
                        "in": "query",
                        "name": "data",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Initial random weights on [-rang, rang]. Value about 0.5 unless the inputs are large, in which case it should be chosen so that rang * max(|x|) is about 1. ",
                        "in": "query",
                        "name": "rang",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Number of units in the hidden layer. Can be zero if there are skip-layer units. ",
                        "in": "query",
                        "name": "size",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "A formula of the form class ~ x1 + x2 + ... ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.omit",
                        "description": "A function to specify the action to be taken if NAs are found. The default action is for the procedure to fail. An alternative is na.omit, which leads to rejection of cases with missing values on any required variable.",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "An index vector specifying the cases to be used in the training sample.",
                        "in": "query",
                        "name": "subset",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "0",
                        "description": "Parameter for weight decay. Default 0.",
                        "in": "query",
                        "name": "decay",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "0",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit Neural Networks.",
                "type": "string"
            }
        },
        "/nnet/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/pacf": {
            "get": {
                "parameters": [
                    {
                        "default": "TRUE",
                        "description": "Logical. If TRUE (the default) the resulting Pacf is plotted.",
                        "in": "query",
                        "name": "plot",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A univariate or multivariate (not Ccf) numeric time series object or a numeric vector or matrix.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "Should covariances be about the sample means?",
                        "in": "query",
                        "name": "demean",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "10\\u2217log10(N/m)",
                        "description": "Maximum lag at which to calculate the Pacf. Default is 10\\u2217\\ log10(N/m) where N is the number of observations and m the number of series.\\ \\ Will be automatically limited to one less than the number of observations\\ \\ in the series.",
                        "in": "query",
                        "name": "lag__max",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "correlation",
                        "description": "Character string giving the type of Pacf to be computed. Allowed values are 'correlation' (the default), 'covariance' or 'partial'.",
                        "in": "query",
                        "name": "var_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.contiguous",
                        "description": "Function to handle missing values. Default is na.contiguous. Useful alternatives are na.pass and na.interp.",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.contiguous",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an Pacf, Partial Autocorrelation Function Estimation",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "TRUE",
                        "description": "Logical. If TRUE (the default) the resulting Pacf is plotted.",
                        "in": "query",
                        "name": "plot",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A univariate or multivariate (not Ccf) numeric time series object or a numeric vector or matrix.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "Should covariances be about the sample means?",
                        "in": "query",
                        "name": "demean",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "10\\u2217log10(N/m)",
                        "description": "Maximum lag at which to calculate the Pacf. Default is 10\\u2217\\ log10(N/m) where N is the number of observations and m the number of series.\\ \\ Will be automatically limited to one less than the number of observations\\ \\ in the series.",
                        "in": "query",
                        "name": "lag__max",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "correlation",
                        "description": "Character string giving the type of Pacf to be computed. Allowed values are 'correlation' (the default), 'covariance' or 'partial'.",
                        "in": "query",
                        "name": "var_type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.contiguous",
                        "description": "Function to handle missing values. Default is na.contiguous. Useful alternatives are na.pass and na.interp.",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.contiguous",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit an Pacf, Partial Autocorrelation Function Estimation",
                "type": "string"
            }
        },
        "/pacf/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/predict": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "a model object for which prediction is desired.",
                        "in": "query",
                        "name": "model",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Model Predictions",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "a model object for which prediction is desired.",
                        "in": "query",
                        "name": "model",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Model Predictions",
                "type": "string"
            }
        },
        "/predict/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/predictETS": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for Exponential smoothing state space model",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for Exponential smoothing state space model",
                "type": "string"
            }
        },
        "/predictETS/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/predictMLP": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for Mulltilayer Perceptron (MLP)",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for Mulltilayer Perceptron (MLP)",
                "type": "string"
            }
        },
        "/predictMLP/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/predictRBF": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for a radial basis function (RBF) network",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for a radial basis function (RBF) network",
                "type": "string"
            }
        },
        "/predictRBF/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/predictRF": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for random forest objects",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for random forest objects",
                "type": "string"
            }
        },
        "/predictRF/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/predictSVM": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for Support Vector Machines (SVM)",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for Support Vector Machines (SVM)",
                "type": "string"
            }
        },
        "/predictSVM/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/predictarima": {
            "get": {
                "parameters": [
                    {
                        "default": "c(0L,0L,0L)",
                        "description": "A specification of the non-seasonal part of the ARIMA model: the three integer components (p, d, q) are the AR order, the degree of differencing, and the MA order.",
                        "in": "query",
                        "name": "order",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "a time series.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Model Predictions",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "c(0L,0L,0L)",
                        "description": "A specification of the non-seasonal part of the ARIMA model: the three integer components (p, d, q) are the AR order, the degree of differencing, and the MA order.",
                        "in": "query",
                        "name": "order",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "a time series.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Model Predictions",
                "type": "string"
            }
        },
        "/predictarima/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/predictlm": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for Linear Model Fits",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for Linear Model Fits",
                "type": "string"
            }
        },
        "/predictlm/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/predictnnet": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for a Neural Networks.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Predict method for a Neural Networks.",
                "type": "string"
            }
        },
        "/predictnnet/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/rbf": {
            "get": {
                "parameters": [
                    {
                        "default": " ",
                        "description": "sets the activation function of the output units to linear or logistic.",
                        "in": "query",
                        "name": "linOut",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the corresponding targets values.",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "a matrix with training inputs for the network.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "number of units in the hidden layer(s). ",
                        "in": "query",
                        "name": "size",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "maximum of iterations to learn. ",
                        "in": "query",
                        "name": "maxit",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the parameters for the learning function.",
                        "in": "query",
                        "name": "learnFuncParams",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the parameters for the initialization function.",
                        "in": "query",
                        "name": "initFuncParams",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Create and train a radial basis function (RBF) network.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": " ",
                        "description": "sets the activation function of the output units to linear or logistic.",
                        "in": "query",
                        "name": "linOut",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the corresponding targets values.",
                        "in": "query",
                        "name": "y",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "a matrix with training inputs for the network.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "number of units in the hidden layer(s). ",
                        "in": "query",
                        "name": "size",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "maximum of iterations to learn. ",
                        "in": "query",
                        "name": "maxit",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the parameters for the learning function.",
                        "in": "query",
                        "name": "learnFuncParams",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "the parameters for the initialization function.",
                        "in": "query",
                        "name": "initFuncParams",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Create and train a radial basis function (RBF) network.",
                "type": "string"
            }
        },
        "/rbf/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/rf": {
            "get": {
                "parameters": [
                    {
                        "default": "remove",
                        "description": "A function which indicates what should happen when the data contain NAs",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "true",
                        "description": "Should sampling of cases be done with or without replacement?",
                        "in": "query",
                        "name": "replace",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Should proximity measure among the rows be calculated?",
                        "in": "query",
                        "name": "proximity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "(Classification only) A vector of length equal to number of classes. The `winning' class for an observation is the one with the maximum ratio of proportion of votes to cutoff. Default is 1/k where k is the number of classes (i.e., majority vote wins).",
                        "in": "query",
                        "name": "cutoff",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "500",
                        "description": "Number of trees to grow. This should not be set to too small a number, to ensure that every input row gets predicted at least a few times.",
                        "in": "query",
                        "name": "ntree",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Maximum number of terminal nodes trees in the forest can have. If not given, trees are grown to the maximum possible (subject to limits by nodesize). If set larger than maximum possible, a warning is issued.",
                        "in": "query",
                        "name": "maxnodes",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Size(s) of sample to draw. For classification, if sampsize is a vector of the length the number of strata, then sampling is stratified by strata, and the elements of sampsize indicate the numbers to be drawn from the strata.",
                        "in": "query",
                        "name": "sampsize",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Minimum size of terminal nodes. Setting this number larger causes smaller trees to be grown (and thus take less time). Note that the default values are different for classification (1) and regression (5).",
                        "in": "query",
                        "name": "nodesize",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A (factor) variable that is used for stratified sampling.",
                        "in": "query",
                        "name": "strata",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Should proximity be calculated only on ``out-of-bag'' data?",
                        "in": "query",
                        "name": "oob__prox",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "1",
                        "description": "Number of times the OOB data are permuted per tree for assessing variable importance. Number larger than 1 gives slightly more stable estimate, but not very effective. Currently only implemented for regression.",
                        "in": "query",
                        "name": "nPerm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Priors of the classes. Need not add up to one. Ignored for regression.",
                        "in": "query",
                        "name": "classwt",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Should importance of predictors be assessed?",
                        "in": "query",
                        "name": "importance",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Number of variables randomly sampled as candidates at each split. Note that the default values are different for classification (sqrt(p) where p is number of variables in x) and regression (p/3)",
                        "in": "query",
                        "name": "mtry",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Should an n by ntree matrix be returned that keeps track of which samples are ``in-bag'' in which trees (but not how many times, if sampling with replacement)",
                        "in": "query",
                        "name": "keep__inbag",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "If TRUE (default), the final result of votes are expressed as fractions. If FALSE, raw vote counts are returned (useful for combining results from different runs). Ignored for regression.",
                        "in": "query",
                        "name": "norm__votes",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "If set to FALSE, the forest will not be retained in the output object. If xtest is given, defaults to FALSE.",
                        "in": "query",
                        "name": "keep__forest",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Should casewise importance measure be computed? (Setting this to TRUE will override importance.)",
                        "in": "query",
                        "name": "localImp",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optional vector specifying a subset of observations to be used in the fitting process",
                        "in": "query",
                        "name": "subset",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Implements Breiman's random forest algorithm (based on Breiman and Cutler's original Fortran code) for classification and regression. It can also be used in unsupervised mode for assessing proximities among data points.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "remove",
                        "description": "A function which indicates what should happen when the data contain NAs",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "true",
                        "description": "Should sampling of cases be done with or without replacement?",
                        "in": "query",
                        "name": "replace",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Should proximity measure among the rows be calculated?",
                        "in": "query",
                        "name": "proximity",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "(Classification only) A vector of length equal to number of classes. The `winning' class for an observation is the one with the maximum ratio of proportion of votes to cutoff. Default is 1/k where k is the number of classes (i.e., majority vote wins).",
                        "in": "query",
                        "name": "cutoff",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "500",
                        "description": "Number of trees to grow. This should not be set to too small a number, to ensure that every input row gets predicted at least a few times.",
                        "in": "query",
                        "name": "ntree",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Maximum number of terminal nodes trees in the forest can have. If not given, trees are grown to the maximum possible (subject to limits by nodesize). If set larger than maximum possible, a warning is issued.",
                        "in": "query",
                        "name": "maxnodes",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Size(s) of sample to draw. For classification, if sampsize is a vector of the length the number of strata, then sampling is stratified by strata, and the elements of sampsize indicate the numbers to be drawn from the strata.",
                        "in": "query",
                        "name": "sampsize",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Minimum size of terminal nodes. Setting this number larger causes smaller trees to be grown (and thus take less time). Note that the default values are different for classification (1) and regression (5).",
                        "in": "query",
                        "name": "nodesize",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A (factor) variable that is used for stratified sampling.",
                        "in": "query",
                        "name": "strata",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Should proximity be calculated only on ``out-of-bag'' data?",
                        "in": "query",
                        "name": "oob__prox",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "1",
                        "description": "Number of times the OOB data are permuted per tree for assessing variable importance. Number larger than 1 gives slightly more stable estimate, but not very effective. Currently only implemented for regression.",
                        "in": "query",
                        "name": "nPerm",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Priors of the classes. Need not add up to one. Ignored for regression.",
                        "in": "query",
                        "name": "classwt",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Should importance of predictors be assessed?",
                        "in": "query",
                        "name": "importance",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Number of variables randomly sampled as candidates at each split. Note that the default values are different for classification (sqrt(p) where p is number of variables in x) and regression (p/3)",
                        "in": "query",
                        "name": "mtry",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Should an n by ntree matrix be returned that keeps track of which samples are ``in-bag'' in which trees (but not how many times, if sampling with replacement)",
                        "in": "query",
                        "name": "keep__inbag",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "TRUE",
                        "description": "If TRUE (default), the final result of votes are expressed as fractions. If FALSE, raw vote counts are returned (useful for combining results from different runs). Ignored for regression.",
                        "in": "query",
                        "name": "norm__votes",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "If set to FALSE, the forest will not be retained in the output object. If xtest is given, defaults to FALSE.",
                        "in": "query",
                        "name": "keep__forest",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "FALSE",
                        "description": "Should casewise importance measure be computed? (Setting this to TRUE will override importance.)",
                        "in": "query",
                        "name": "localImp",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Optional vector specifying a subset of observations to be used in the fitting process",
                        "in": "query",
                        "name": "subset",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "NULL",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Implements Breiman's random forest algorithm (based on Breiman and Cutler's original Fortran code) for classification and regression. It can also be used in unsupervised mode for assessing proximities among data points.",
                "type": "string"
            }
        },
        "/rf/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/rf_spark": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A spark connection, ml pipeline or a tbl sparkA spark connection, ml pipeline or a tbl spark",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum depth of the tree",
                        "in": "query",
                        "name": "max_depth",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Number of trees to train",
                        "in": "query",
                        "name": "num_trees",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "As a character string or a formula",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "ml_random_forest fits a Random Forest Regression model or Classification model on a SparkDataFrame.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A spark connection, ml pipeline or a tbl sparkA spark connection, ml pipeline or a tbl spark",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Maximum depth of the tree",
                        "in": "query",
                        "name": "max_depth",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Number of trees to train",
                        "in": "query",
                        "name": "num_trees",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "As a character string or a formula",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "ml_random_forest fits a Random Forest Regression model or Classification model on a SparkDataFrame.",
                "type": "string"
            }
        },
        "/rf_spark/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/shapiro": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A numeric vector of data values. Missing values are allowed, but the number of non-missing values must be between 3 and 5000.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit a Shapiro-Wilk Normality Test.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A numeric vector of data values. Missing values are allowed, but the number of non-missing values must be between 3 and 5000.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Fit a Shapiro-Wilk Normality Test.",
                "type": "string"
            }
        },
        "/shapiro/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/stl": {
            "get": {
                "parameters": [
                    {
                        "default": " ",
                        "description": "Either the character string 'periodic' or the span (in lags) of the loess window for seasonal extraction, which should be odd and at least 7, according to Cleveland et al. This has no default.",
                        "in": "query",
                        "name": "s__window",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Logical indicating if robust fitting be used in the loess procedure.",
                        "in": "query",
                        "name": "robust",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Univariate time series to be decomposed. This should be an object of class 'ts' with a frequency greater than one.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "nextodd(ceiling((1.5*period)/(1-(1.5/s.window))))",
                        "description": "The span (in lags) of the loess window for trend extraction, which should be odd.",
                        "in": "query",
                        "name": "t__window",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Integers at least one to increase speed of the respective smoother.",
                        "in": "query",
                        "name": "t__jump",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Seasonal Decomposition of Time Series by Loess.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": " ",
                        "description": "Either the character string 'periodic' or the span (in lags) of the loess window for seasonal extraction, which should be odd and at least 7, according to Cleveland et al. This has no default.",
                        "in": "query",
                        "name": "s__window",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Logical indicating if robust fitting be used in the loess procedure.",
                        "in": "query",
                        "name": "robust",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Univariate time series to be decomposed. This should be an object of class 'ts' with a frequency greater than one.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "nextodd(ceiling((1.5*period)/(1-(1.5/s.window))))",
                        "description": "The span (in lags) of the loess window for trend extraction, which should be odd.",
                        "in": "query",
                        "name": "t__window",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Integers at least one to increase speed of the respective smoother.",
                        "in": "query",
                        "name": "t__jump",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Seasonal Decomposition of Time Series by Loess.",
                "type": "string"
            }
        },
        "/stl/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/svc_spark": {
            "get": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A spark_connection, ml_pipeline, or a tbl_spark.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Used when x is a tbl_spark. R formula as a character string or a formula.",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "The maximum number of iterations to use.",
                        "in": "query",
                        "name": "max_iter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Perform classification using linear support vector machines (SVM). This binary classifier optimizes the Hinge Loss using the OWLQN optimizer. Only supports L2 regularization currently.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "",
                        "description": "A spark_connection, ml_pipeline, or a tbl_spark.",
                        "in": "query",
                        "name": "x",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": " ",
                        "description": "Used when x is a tbl_spark. R formula as a character string or a formula.",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "The maximum number of iterations to use.",
                        "in": "query",
                        "name": "max_iter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Perform classification using linear support vector machines (SVM). This binary classifier optimizes the Hinge Loss using the OWLQN optimizer. Only supports L2 regularization currently.",
                "type": "string"
            }
        },
        "/svc_spark/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        },
        "/svm": {
            "get": {
                "parameters": [
                    {
                        "default": " ",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.omit",
                        "description": "A function which indicates what should happen when the data contain NAs",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.omit",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Far from being a panacea, SVMs yet represent a powerful technique for general (nonlinear) classification, regression and outlier detection with an intuitive model representation.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": " ",
                        "description": "Response variable and Formulae ",
                        "in": "query",
                        "name": "formula",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.omit",
                        "description": "A function which indicates what should happen when the data contain NAs",
                        "in": "query",
                        "name": "na__action",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "default": "na.omit",
                        "description": "Dataset on which the service is applied",
                        "in": "query",
                        "name": "dataset",
                        "required": true,
                        "type": "string"
                    }
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Far from being a panacea, SVMs yet represent a powerful technique for general (nonlinear) classification, regression and outlier detection with an intuitive model representation.",
                "type": "string"
            }
        },
        "/svm/download": {
            "get": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "Output of the service contains Model or ModelEvaluation or Data"
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            },
            "post": {
                "parameters": [
                    {
                        "default": "ttl",
                        "description": "asdasd",
                        "in": "query",
                        "name": "file_format",
                        "required": "true",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/binary"
                ],
                "response": {
                    "200": {
                        "description": "The Turtle file."
                    }
                },
                "summary": "Returns the service definition in the specified format.",
                "type": "string"
            }
        }
    },
    "produces": [
        "text/xml"
    ],
    "swagger": "2.0",
    "title": "OPENCCML API",
    "version": "0.1"
}